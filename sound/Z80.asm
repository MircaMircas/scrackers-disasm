;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-327F-7274-B7			    |
; |			       ESET spol. s r.o.			    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	67BD829482D9F4E1D26E7BE4C15D713A
; Input	CRC32 :	075C8CB8

; ---------------------------------------------------------------------------
; File Name   :	D:\VStudio-Programme\VC2010\SMPSPlay\SMPS_Lib\Z80Drvs\DAC\Type2\Sonic and Crackers (Beta).bin
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 1216h Loaded length: 1216h

; Processor	  : z80	[]
; Target assembler: Zilog Macro	Assembler

; ===========================================================================

BankRegister	=	6000h

bankswitch macro
		ld	hl, BankRegister
		ld	(hl), a
		rept 5
			rra
			ld	(hl), a
		endm
		xor	a
		ld	(hl), a
    endm

; Segment type:	Regular

loc_0:
		di
		di
		im	1
		jp	InitDriver
; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


ReadPtrTable:
		ld	c, a
		ld	b, 0
		add	hl, bc
		add	hl, bc
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ret
; End of function ReadPtrTable

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


WriteFMIorII:
		bit	2, (ix+0)
		ret	nz
		add	a, (ix+1)
		bit	2, (ix+1)
		jr	nz, WriteFMIIPart
; End of function WriteFMIorII


; =============== S U B	R O U T	I N E =======================================


WriteFMI:
		ld	(ym2612_a0), a
		ld	a, c
		ld	(ym2612_d0), a
		ret
; End of function WriteFMI

; ---------------------------------------------------------------------------

WriteFMIIPart:
		sub	4

; =============== S U B	R O U T	I N E =======================================


WriteFMII:
		ld	(ym2612_a1), a
		ld	a, c
		ld	(ym2612_d1), a
		ret
; End of function WriteFMII

; ---------------------------------------------------------------------------

VInt:
		di
		push	af
		push	iy
		exx
		call	DoSoundQueue
		call	UpdateAll
		ld	a, (1C3Ch)
		or	a
		jp	z, loc_AB
		jp	m, loc_95
		ld	a, 2Bh
		ld	c, 80h
		call	WriteFMI
		ld	hl, 1C3Ch
		ld	a, (hl)
		dec	a
		set	7, (hl)
		ld	hl, DACTablePtrs
		rst	ReadPtrTable
		ld	c, 80h
		ld	a, (hl)
		ld	(DACLoop+1), a
		ld	(loc_F11+1), a
		inc	hl
		ld	a, (hl)
		ld	(1C05h), a
		inc	hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		exx
		ld	hl, 1C05h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a
		exx
		pop	iy
		pop	af
		pop	af
		jp	loc_EED
; ---------------------------------------------------------------------------

loc_95:
		ld	hl, 1C05h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a

loc_AB:
		exx
		pop	iy
		pop	af
		ld	b, 1
		ret
; ---------------------------------------------------------------------------

InitDriver:
		ld	sp, 2000h
		ld	c, 0

loc_B7:
		ld	b, 0

loc_B9:
		djnz	$
		dec	c
		jr	nz, loc_B7
		call	StopAllSound
		ld	a, 2
		ld	(1C04h), a
		ld	a, 4
		ld	(1C05h), a
		ld	hl, 1C05h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a
		ld	iy, DPCMData
		ei
		jp	loc_EE5

; =============== S U B	R O U T	I N E =======================================


UpdateAll:
		call	DoPause
		call	DoTempo
		call	DoFading
		call	PlaySoundID
		call	UpdateSFXTracks
		xor	a
		ld	(1C19h), a	; 00 - Music Mode
		ld	hl, 1C04h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a
		ld	ix, 1C40h
		bit	7, (ix+0)
		call	nz, DrumUpdateTrack
		ld	b, 9
		ld	ix, 1C70h
		jr	TrkUpdateLoop
; End of function UpdateAll


; =============== S U B	R O U T	I N E =======================================


UpdateSFXTracks:
		ld	a, 1
		ld	(1C19h), a	; 01 - SFX Mode
		ld	hl, BankRegister	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	ix, 1E20h
		ld	b, 7
		call	TrkUpdateLoop
		ld	a, 80h
		ld	(1C19h), a	; 80 - Special SFX Mode
		ld	b, 1
		ld	ix, 1F70h
; End of function UpdateSFXTracks


; =============== S U B	R O U T	I N E =======================================


TrkUpdateLoop:
		push	bc
		bit	7, (ix+0)
		call	nz, UpdateTrack
		ld	de, 30h
		add	ix, de
		pop	bc
		djnz	TrkUpdateLoop
		ret
; End of function TrkUpdateLoop


; =============== S U B	R O U T	I N E =======================================


UpdateTrack:
		bit	7, (ix+1)
		jp	nz, UpdatePSGTrk
		call	TrackTimeout
		jr	nz, loc_181
		call	TrkUpdate_Proc
		bit	4, (ix+0)
		ret	nz
		call	PrepareModulat
		call	DoPitchSlide	; also updates the frequency
		call	DoModulation
		call	SendFMFreq
		jp	DoNoteOn
; ---------------------------------------------------------------------------

loc_181:
		call	ExecPanAnim
		bit	4, (ix+0)
		ret	nz
		call	DoFMVolEnv
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_198
		dec	(ix+1Eh)
		jp	z, DoNoteOff

loc_198:
		call	DoPitchSlide
		bit	6, (ix+0)
		ret	nz
		call	DoModulation
; End of function UpdateTrack


; =============== S U B	R O U T	I N E =======================================


SendFMFreq:
		bit	2, (ix+0)
		ret	nz
		bit	0, (ix+0)
		jp	nz, loc_1B8

loc_1AF:
		ld	a, 0A4h
		ld	c, h
		rst	WriteFMIorII
		ld	a, 0A0h
		ld	c, l
		rst	WriteFMIorII
		ret
; ---------------------------------------------------------------------------

loc_1B8:
		ld	a, (ix+1)
		cp	2
		jr	nz, loc_1AF
		call	GetFM3FreqPtr
		ld	b, 4
		ld	hl, SpcFM3Regs

loc_1C7:
		push	bc
		ld	a, (hl)
		inc	hl
		push	hl
		ex	de, hl
		ld	c, (hl)
		inc	hl
		ld	b, (hl)
		inc	hl
		ex	de, hl
		ld	l, (ix+0Dh)
		ld	h, (ix+0Eh)
		add	hl, bc
		push	af
		ld	c, h
		call	WriteFMI
		pop	af
		sub	4
		ld	c, l
		call	WriteFMI
		pop	hl
		pop	bc
		djnz	loc_1C7
		ret
; End of function SendFMFreq

; ---------------------------------------------------------------------------
SpcFM3Regs:	db 0ADh, 0AEh, 0ACh, 0A6h

; =============== S U B	R O U T	I N E =======================================


GetFM3FreqPtr:
		ld	de, 1C2Ah
		ld	a, (1C19h)
		or	a
		ret	z		; Music	Mode (00) - 1C2A
		ld	de, 1C1Ah
		ret	p		; Special SFX Mode (80)	- 1C1A
		ld	de, 1C22h
		ret			; SFX Mode (01)	- 1C22
; End of function GetFM3FreqPtr


; =============== S U B	R O U T	I N E =======================================


TrkUpdate_Proc:
		ld	e, (ix+3)
		ld	d, (ix+4)
		res	1, (ix+0)
		res	4, (ix+0)

loc_20B:
		ld	a, (de)
		inc	de
		cp	0E0h
		jp	nc, cfHandler
		ex	af, af'
		call	DoNoteOff
		call	DoPanAnimation
		ex	af, af'
		bit	3, (ix+0)
		jp	nz, DoRawFreqMode
		or	a
		jp	p, SetDuration
		sub	81h
		jp	p, GetNote
		call	SetRest
		jr	loc_25D
; ---------------------------------------------------------------------------

GetNote:
		add	a, (ix+5)
		ld	hl, PSGFreqs
		push	af
		rst	ReadPtrTable
		pop	af
		bit	7, (ix+1)
		jr	nz, loc_257
		push	de
		ld	d, 8
		ld	e, 0Ch
		ex	af, af'
		xor	a

loc_245:
		ex	af, af'
		sub	e
		jr	c, loc_24E
		ex	af, af'
		add	a, d
		jr	loc_245
; ---------------------------------------------------------------------------
		ex	af, af'

loc_24E:
		add	a, e
		ld	hl, FMFreqs
		rst	ReadPtrTable
		ex	af, af'
		or	h
		ld	h, a
		pop	de

loc_257:
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h

loc_25D:
		bit	5, (ix+0)
		jr	nz, loc_270
		ld	a, (de)
		or	a
		jp	p, loc_29C
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		jr	loc_2A3
; ---------------------------------------------------------------------------

loc_270:
		ld	a, (de)
		inc	de
		ld	(ix+10h), a
		jr	loc_29B
; ---------------------------------------------------------------------------

DoRawFreqMode:
		ld	h, a
		ld	a, (de)
		inc	de
		ld	l, a
		or	h
		jr	z, loc_28A
		ld	a, (ix+5)
		ld	b, 0
		or	a
		jp	p, loc_288
		dec	b

loc_288:
		ld	c, a
		add	hl, bc

loc_28A:
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h
		bit	5, (ix+0)
		jr	z, loc_29B
		ld	a, (de)
		inc	de
		ld	(ix+10h), a

loc_29B:
		ld	a, (de)

loc_29C:
		inc	de

SetDuration:
		call	TickMultiplier
		ld	(ix+0Ch), a

loc_2A3:
		ld	(ix+3),	e
		ld	(ix+4),	d
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		bit	1, (ix+0)
		ret	nz
		xor	a
		ld	(ix+25h), a
		ld	(ix+22h), a
		ld	(ix+17h), a
		ld	a, (ix+1Fh)
		ld	(ix+1Eh), a
		ret
; End of function TrkUpdate_Proc


; =============== S U B	R O U T	I N E =======================================


TickMultiplier:
		ld	b, (ix+2)
		dec	b
		ret	z
		ld	c, a

loc_2CB:
		add	a, c
		djnz	loc_2CB
		ret
; End of function TickMultiplier


; =============== S U B	R O U T	I N E =======================================


TrackTimeout:
		ld	a, (ix+0Bh)
		dec	a
		ld	(ix+0Bh), a
		ret
; End of function TrackTimeout

; ---------------------------------------------------------------------------

DoNoteOn:
		ld	a, (ix+0Dh)
		or	(ix+0Eh)
		ret	z
		ld	a, (ix+0)
		and	6
		ret	nz
		ld	a, (ix+1)
		or	0F0h
		ld	c, a
		ld	a, 28h
		call	WriteFMI
		ret

; =============== S U B	R O U T	I N E =======================================


DoNoteOff:
		ld	a, (ix+0)
		and	6
		ret	nz

SendNoteOff:
		ld	c, (ix+1)
		bit	7, c
		ret	nz
; End of function DoNoteOff

FMNoteOff:
		ld	a, 28h
		call	WriteFMI
		res	6, (ix+0)
		ret

; =============== S U B	R O U T	I N E =======================================


DoPanAnimation:
		ld	a, (ix+11h)
		dec	a
		ret	m
		jr	nz, loc_34C
		bit	1, (ix+0)
		ret	nz

loc_312:
		dec	(ix+16h)
		ret	nz
		push	bc
		push	de
		push	hl
		ld	a, (ix+15h)
		ld	(ix+16h), a
		ld	a, (ix+12h)
		ld	hl, PanAniPtrList
		rst	ReadPtrTable
		ld	e, (ix+13h)
		inc	(ix+13h)
		ld	a, (ix+14h)
		dec	a
		cp	e
		jr	nz, loc_341
		dec	(ix+13h)
		ld	a, (ix+11h)
		cp	2
		jr	z, loc_341
		ld	(ix+13h), 0

loc_341:
		ld	d, 0
		add	hl, de
		ex	de, hl
		call	cfE0_Pan
		pop	hl
		pop	de
		pop	bc
		ret
; ---------------------------------------------------------------------------

loc_34C:
		xor	a
		ld	(ix+13h), a
; End of function DoPanAnimation


; =============== S U B	R O U T	I N E =======================================


ExecPanAnim:
		ld	a, (ix+11h)
		sub	2
		ret	m
		jr	loc_312
; End of function ExecPanAnim

; ---------------------------------------------------------------------------
PanAniPtrList:	dw byte_360, byte_361, byte_362, byte_363
byte_360:	db 0C0h
byte_361:	db  80h
byte_362:	db 0C0h
byte_363:	db  40h,0C0h, 80h

; =============== S U B	R O U T	I N E =======================================


DoFMVolEnv:
		ld	a, (ix+18h)
		or	a
		ret	z
		ret	m
		dec	a
		ld	hl, VolEnvPtrs
		rst	ReadPtrTable
		call	DoPSGVolEnv
		ld	h, (ix+1Dh)
		ld	l, (ix+1Ch)
		ld	de, Volume_Ops
		ld	b, 4
		ld	c, (ix+19h)

loc_382:
		push	af
		sra	c
		push	bc
		jr	nc, loc_38E
		add	a, (hl)
		and	7Fh
		ld	c, a
		ld	a, (de)
		rst	WriteFMIorII

loc_38E:
		pop	bc
		inc	de
		inc	hl
		pop	af
		djnz	loc_382
		ret
; End of function DoFMVolEnv


; =============== S U B	R O U T	I N E =======================================


PrepareModulat:
		bit	7, (ix+7)
		ret	z
		bit	1, (ix+0)
		ret	nz
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	ix
		pop	hl
		ld	b, 0
		ld	c, 24h
		add	hl, bc
		ex	de, hl
		ldi
		ldi
		ldi
		ld	a, (hl)
		srl	a
		ld	(de), a
		xor	a
		ld	(ix+22h), a
		ld	(ix+23h), a
		ret
; End of function PrepareModulat


; =============== S U B	R O U T	I N E =======================================


DoModulation:
		ld	a, (ix+7)
		or	a
		ret	z
		cp	80h
		jr	nz, DoModEnv
		dec	(ix+24h)
		ret	nz
		inc	(ix+24h)
		push	hl
		ld	l, (ix+22h)
		ld	h, (ix+23h)
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	de
		pop	iy
		dec	(ix+25h)
		jr	nz, loc_3FC
		ld	a, (iy+1)
		ld	(ix+25h), a
		ld	a, (ix+26h)
		ld	c, a
		and	80h
		rlca
		neg
		ld	b, a
		add	hl, bc
		ld	(ix+22h), l
		ld	(ix+23h), h

loc_3FC:
		pop	bc
		add	hl, bc
		dec	(ix+27h)
		ret	nz
		ld	a, (iy+3)
		ld	(ix+27h), a

loc_408:
		ld	a, (ix+26h)
		neg

loc_40D:
		ld	(ix+26h), a
		ret
; ---------------------------------------------------------------------------

DoModEnv:
		dec	a
		ex	de, hl
		ld	hl, ModEnvPtrs
		rst	ReadPtrTable
		jr	loc_41C
; ---------------------------------------------------------------------------

loc_419:
		ld	(ix+25h), a

loc_41C:
		push	hl
		ld	c, (ix+25h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jp	z, ModEnv_Positive
		cp	82h
		jr	z, ModEnv_Jump2Idx ; 82	xx - jump to byte xx
		cp	80h
		jr	z, ModEnv_Reset	; 80 - loop back to beginning
		cp	84h
		jr	z, ModEnv_ChgMult ; 84 xx - change Modulation Multipler
		ld	h, 0FFh		; make HL negative (FFxx)
		jr	nc, ModEnv_Next
		set	6, (ix+0)
		pop	hl
		ret
; ---------------------------------------------------------------------------

ModEnv_Jump2Idx:
		inc	bc
		ld	a, (bc)
		jr	loc_419
; ---------------------------------------------------------------------------

ModEnv_Reset:
		xor	a
		jr	loc_419
; ---------------------------------------------------------------------------

ModEnv_ChgMult:
		inc	bc
		ld	a, (bc)
		add	a, (ix+22h)
		ld	(ix+22h), a
		inc	(ix+25h)
		inc	(ix+25h)
		jr	loc_41C
; ---------------------------------------------------------------------------

ModEnv_Positive:
		ld	h, 0		; make HL positive (00xx)

ModEnv_Next:
		ld	l, a
		ld	b, (ix+22h)
		inc	b
		ex	de, hl

loc_45F:
		add	hl, de
		djnz	loc_45F
		inc	(ix+25h)
		ret
; End of function DoModulation


; =============== S U B	R O U T	I N E =======================================


DoPitchSlide:
		ld	b, 0
		ld	a, (ix+10h)
		or	a
		jp	p, loc_470
		dec	b

loc_470:
		ld	h, (ix+0Eh)
		ld	l, (ix+0Dh)
		ld	c, a
		add	hl, bc
		bit	7, (ix+1)
		jr	nz, loc_4A0
		ex	de, hl
		ld	a, 7
		and	d
		ld	b, a
		ld	c, e
		or	a
		ld	hl, 283h
		sbc	hl, bc
		jr	c, loc_492
		ld	hl, -57Bh
		add	hl, de
		jr	loc_4A0
; ---------------------------------------------------------------------------

loc_492:
		or	a
		ld	hl, 508h
		sbc	hl, bc
		jr	nc, loc_49F
		ld	hl, 57Ch
		add	hl, de
		ex	de, hl

loc_49F:
		ex	de, hl

loc_4A0:
		bit	5, (ix+0)
		ret	z
		ld	(ix+0Eh), h
		ld	(ix+0Dh), l
		ret
; End of function DoPitchSlide


; =============== S U B	R O U T	I N E =======================================


GetFMInsPtr:
		ld	hl, (1C37h)
		ld	a, (1C19h)
		or	a
		jr	z, JumpToInsData ; Mode	00 (Music Mode)	- jump
		ld	l, (ix+2Ah)	; load SFX track Instrument Pointer (Trk+2A/2B)
		ld	h, (ix+2Bh)
; End of function GetFMInsPtr


; =============== S U B	R O U T	I N E =======================================


JumpToInsData:
		xor	a
		or	b
		ret	z
		ld	de, 19h

loc_4C1:
		add	hl, de
		djnz	loc_4C1
		ret
; End of function JumpToInsData

; ---------------------------------------------------------------------------
FMInsOperators:	db 0B0h
		db  30h, 38h, 34h, 3Ch
		db  50h, 58h, 54h, 5Ch
		db  60h, 68h, 64h, 6Ch
		db  70h, 78h, 74h, 7Ch
		db  80h, 88h, 84h, 8Ch
Volume_Ops:	db  40h, 48h, 44h, 4Ch
SSGEG_Ops:	db  90h, 98h, 94h, 9Ch

; =============== S U B	R O U T	I N E =======================================


SendFMIns:
		ld	de, FMInsOperators
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII
		call	WriteInsReg
		ld	(ix+1Bh), a
		ld	b, 14h

loc_4F3:
		call	WriteInsReg
		djnz	loc_4F3
		ld	(ix+1Ch), l
		ld	(ix+1Dh), h
		jp	RefreshVolume
; End of function SendFMIns


; =============== S U B	R O U T	I N E =======================================


WriteInsReg:
		ld	a, (de)
		inc	de
		ld	c, (hl)
		inc	hl
		rst	WriteFMIorII
		ret
; End of function WriteInsReg


; =============== S U B	R O U T	I N E =======================================


PlaySoundID:
		ld	a, (1C09h)
		bit	7, a
		jp	z, StopAllSound	; 00-7F	- Stop All
		cp	0A0h
		jp	c, zPlayMusic	; 80-9F	- Music
		cp	0B0h
		jp	c, PlaySFX	; 90-9F	- SFX
		cp	0E0h
		jp	c, PlaySpcSFX	; B0-DF	- Special SFX
		cp	0F9h
		jp	nc, StopAllSound

PlaySnd_Command:
		sub	0E0h
		ld	hl, CmdPtrTable
		rst	ReadPtrTable
		xor	a
		ld	(1C18h), a
		jp	(hl)
; ---------------------------------------------------------------------------
CmdPtrTable:	dw FadeOutMusic
		dw StopAllSound
		dw SilencePSG
		dw FadeInMusic
; ---------------------------------------------------------------------------

FadeInMusic:
		ld	ix, 1F70h
		ld	b, 2
		ld	a, 80h
		ld	(1C19h), a

loc_541:
		push	bc
		bit	7, (ix+0)
		call	nz, loc_552
		ld	de, 30h
		add	ix, de
		pop	bc
		djnz	loc_541
		ret
; ---------------------------------------------------------------------------

loc_552:
		push	hl
		push	hl
		jp	cfF2_StopTrk
; ---------------------------------------------------------------------------

zPlayMusic:
		sub	81h
		ret	m
		ex	af, af'
		call	StopAllSound
		ex	af, af'
		push	af
		ld	hl, MusicBanks
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (hl)
		ld	(1C04h), a
		ld	hl, 1C04h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a
		pop	af
		ld	hl, MusicPtrs
		rst	ReadPtrTable
		push	hl
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(1C37h), hl
		pop	hl
		pop	iy
		ld	a, (iy+5)
		ld	(1C13h), a
		ld	(1C14h), a
		ld	de, 6
		add	hl, de
		ld	(1C33h), hl
		ld	hl, FMInitBytes
		ld	(1C35h), hl
		ld	de, 1C40h
		ld	b, (iy+2)
		ld	a, (iy+4)

loc_5B2:
		push	bc
		ld	hl, (1C35h)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(1C35h), hl
		ld	hl, (1C33h)
		ldi
		ldi
		ldi
		ldi
		ld	(1C33h), hl
		call	FinishFMTrkInit
		pop	bc
		djnz	loc_5B2
		ld	a, (iy+3)
		or	a
		jp	z, ClearSoundID
		ld	b, a
		ld	hl, PSGInitBytes
		ld	(1C35h), hl
		ld	de, 1D90h
		ld	a, (iy+4)

loc_5E7:
		push	bc
		ld	hl, (1C35h)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(1C35h), hl
		ld	hl, (1C33h)
		ld	bc, 6
		ldir
		ld	(1C33h), hl
		call	FinishTrkInit
		pop	bc
		djnz	loc_5E7
; End of function PlaySoundID

ClearSoundID:
		ld	a, 80h
		ld	(1C09h), a
		ret
; ---------------------------------------------------------------------------
FMInitBytes:	db  80h,   6
		db  80h,   0
		db  80h,   1
		db  80h,   2
		db  80h,   4
		db  80h,   5
		db  80h,   6
PSGInitBytes:	db  80h, 80h
		db  80h,0A0h
		db  80h,0C0h
; ---------------------------------------------------------------------------

PlaySpcSFX:
		ex	af, af'
		ld	hl, BankRegister	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ex	af, af'
		sub	0D0h
		ex	af, af'
		ld	a, 80h
		ld	hl, SpcSFXPtrs
		jr	loc_652
; ---------------------------------------------------------------------------

PlaySFX:
		ex	af, af'
		ld	hl, BankRegister	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ex	af, af'
		sub	0A0h
		ex	af, af'
		xor	a
		ld	hl, SFXPtrs

loc_652:
		ld	(1C19h), a
		ex	af, af'
		rst	ReadPtrTable
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(1C39h), hl
		xor	a
		ld	(1C15h), a
		pop	hl
		push	hl
		pop	iy
		ld	a, (iy+2)
		ld	(1C3Bh), a
		ld	de, 4
		add	hl, de
		ld	b, (iy+3)

loc_674:
		push	bc
		push	hl
		inc	hl
		ld	c, (hl)
		call	GetSFXChnPtrs
		set	2, (hl)
		push	ix
		ld	a, (1C19h)
		or	a
		jr	z, loc_688
		pop	hl
		push	iy

loc_688:
		pop	de
		pop	hl
		ldi
		ld	a, (de)
		cp	2
		call	z, ResetSpcFM3Mode
		ldi
		ld	a, (1C3Bh)
		ld	(de), a
		inc	de
		ldi
		ldi
		ldi
		ldi
		call	FinishFMTrkInit
		bit	7, (ix+0)
		jr	z, loc_6B6
		ld	a, (ix+1)
		cp	(iy+1)
		jr	nz, loc_6B6
		set	2, (iy+0)

loc_6B6:
		push	hl
		ld	hl, (1C39h)
		ld	a, (1C19h)
		or	a
		jr	z, loc_6C4
		push	iy
		pop	ix

loc_6C4:
		ld	(ix+2Ah), l
		ld	(ix+2Bh), h
		call	DoNoteOff
		call	DisableSSGEG
		pop	hl
		pop	bc
		djnz	loc_674
		jp	ClearSoundID

; =============== S U B	R O U T	I N E =======================================


GetSFXChnPtrs:
		bit	7, c
		jr	nz, loc_6E3
		ld	a, c
		bit	2, a
		jr	z, loc_6FA
		dec	a
		jr	loc_6FA
; ---------------------------------------------------------------------------

loc_6E3:
		ld	a, 1Fh
		call	SilencePSGChn
		ld	a, 0FFh
		ld	(7F11h), a
		ld	a, c
		srl	a
		srl	a
		srl	a
		srl	a
		srl	a
		add	a, 2

loc_6FA:
		sub	2
		ld	(1C32h), a
		push	af
		ld	hl, SFXChnPtrs
		rst	ReadPtrTable
		push	hl
		pop	ix		; IX - SFX Track
		pop	af
		push	af
		ld	hl, SpcSFXChnPtrs
		rst	ReadPtrTable
		push	hl
		pop	iy		; IY - Special SFX Track
		pop	af
		ld	hl, BGMChnPtrs
		rst	ReadPtrTable	; HL - Music Track
		ret
; End of function GetSFXChnPtrs


; =============== S U B	R O U T	I N E =======================================


FinishFMTrkInit:
		ex	af, af'
		xor	a
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ex	af, af'
; End of function FinishFMTrkInit


; =============== S U B	R O U T	I N E =======================================


FinishTrkInit:
		ex	de, hl
		ld	(hl), 30h
		inc	hl
		ld	(hl), 0C0h
		inc	hl
		ld	(hl), 1
		ld	b, 24h

loc_728:
		inc	hl
		ld	(hl), 0
		djnz	loc_728
		inc	hl
		ex	de, hl
		ret
; End of function FinishTrkInit

; ---------------------------------------------------------------------------
SpcSFXChnPtrs:	dw  1F70h, 1F70h, 1F70h, 1F70h,	1F70h, 1F70h, 1F70h, 1F70h
SFXChnPtrs:	dw  1E20h, 1E50h, 1E80h, 1EB0h,	1EE0h, 1F10h, 1F40h, 1F40h
BGMChnPtrs:	dw  1CD0h, 1D00h, 1D30h, 1D60h,	1D90h, 1DC0h, 1DF0h, 1DF0h

; =============== S U B	R O U T	I N E =======================================


DoPause:
		ld	hl, 1C10h
		ld	a, (hl)
		or	a
		ret	z
		jp	m, UnpauseMusic
		pop	de
		dec	a
		ret	nz
		ld	(hl), 2
		jp	SilenceAll
; ---------------------------------------------------------------------------

UnpauseMusic:
		xor	a
		ld	(hl), a
		ld	a, (1C0Dh)
		or	a
		jp	nz, StopAllSound
		ld	ix, 1C40h
		ld	b, 7

loc_780:
		ld	a, (1C11h)
		or	a
		jr	nz, locb_78C
		bit	7, (ix+0)
		jr	z, loc_792

locb_78C:
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII

loc_792:
		ld	de, 30h
		add	ix, de
		djnz	loc_780
		ld	ix, 1E20h
		ld	b, 8

loc_79F:
		bit	7, (ix+0)
		jr	z, loc_7B1
		bit	7, (ix+1)
		jr	nz, loc_7B1
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII

loc_7B1:
		ld	de, 30h
		add	ix, de
		djnz	loc_79F
		ret
; End of function DoPause

; ---------------------------------------------------------------------------

FadeOutMusic:
		ld	a, 28h
		ld	(1C0Dh), a
		ld	a, 6
		ld	(1C0Fh), a
		ld	(1C0Eh), a

; =============== S U B	R O U T	I N E =======================================


StopDrumPSG:
		xor	a
		ld	(1C40h), a
		ld	(1D60h), a
		ld	(1DF0h), a
		ld	(1D90h), a
		ld	(1DC0h), a
		jp	SilencePSG
; End of function StopDrumPSG


; =============== S U B	R O U T	I N E =======================================


DoFading:
		ld	hl, 1C0Dh
		ld	a, (hl)
		or	a
		ret	z
		call	m, StopDrumPSG
		res	7, (hl)
		ld	a, (1C0Fh)
		dec	a
		jr	z, loc_7EE
		ld	(1C0Fh), a
		ret
; ---------------------------------------------------------------------------

loc_7EE:
		ld	a, (1C0Eh)
		ld	(1C0Fh), a
		ld	a, (1C0Dh)
		dec	a
		ld	(1C0Dh), a
		jr	z, StopAllSound
		ld	hl, 1C04h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a
		ld	hl, 1C06h
		inc	(hl)
		ld	ix, 1C40h
		ld	b, 6

loc_81D:
		bit	7, (ix+0)
		jr	z, loc_82E
		bit	2, (ix+0)
		jr	nz, loc_82E
		push	bc
		call	RefreshVolume
		pop	bc

loc_82E:
		ld	de, 30h
		add	ix, de
		djnz	loc_81D
		ret
; End of function DoFading


; =============== S U B	R O U T	I N E =======================================


StopAllSound:
		ld	hl, 1C09h
		ld	de, soundqueue0
		ld	bc, 396h
		ld	(hl), 0
		ldir
		ld	ix, FMInitBytes
		ld	b, 6

loc_849:
		push	bc
		call	SilenceFMChn
		call	DisableSSGEG
		inc	ix
		inc	ix
		pop	bc
		djnz	loc_849
		ld	b, 7
		xor	a
		ld	(1C06h), a
		ld	(1C3Ch), a
		ld	(1C0Dh), a
		call	SilencePSG
		ld	c, 0
		ld	a, 2Bh
		call	WriteFMI

ResetSpcFM3Mode:
		xor	a
		ld	(1C12h), a
		ld	c, a
		ld	a, 27h
		call	WriteFMI
		jp	ClearSoundID
; End of function StopAllSound


; =============== S U B	R O U T	I N E =======================================


DisableSSGEG:
		ld	a, 90h
		ld	c, 0
		jp	SendAllFMOps
; End of function DisableSSGEG

; ---------------------------------------------------------------------------

SilenceAll:
		call	SilencePSG
		push	bc
		push	af
		ld	b, 3
		ld	a, 0B4h
		ld	c, 0

loc_88C:
		push	af
		call	WriteFMI
		pop	af
		inc	a
		djnz	loc_88C
		ld	b, 3
		ld	a, 0B4h

loc_898:
		push	af
		call	WriteFMII
		pop	af
		inc	a
		djnz	loc_898
		ld	c, 0
		ld	b, 7
		ld	a, 28h

loc_8A6:
		push	af
		call	WriteFMI
		inc	c
		pop	af
		djnz	loc_8A6
		pop	af
		pop	bc

; =============== S U B	R O U T	I N E =======================================


SilencePSG:
		push	bc
		ld	b, 4
		ld	a, 9Fh

loc_8B5:
		ld	(7F11h), a
		add	a, 20h
		djnz	loc_8B5
		pop	bc
		jp	ClearSoundID
; End of function SilencePSG


; =============== S U B	R O U T	I N E =======================================


DoTempo:
		ld	a, (1C14h)
		ld	hl, 1C13h
		add	a, (hl)
		ld	(hl), a
		ret	nc
		ld	hl, 1C4Bh
		ld	de, 30h
		ld	b, 0Ah

loc_8D1:
		inc	(hl)
		add	hl, de
		djnz	loc_8D1
		ret
; End of function DoTempo


; =============== S U B	R O U T	I N E =======================================


DoSoundQueue:
		ld	a, r
		ld	(1C17h), a
		ld	de, soundqueue0
		ld	b, 3

loc_8E0:
		ld	a, (de)
		ld	c, a
		bit	7, a
		jr	z, loc_905
		sub	86h
		jp	c, loc_90B
		sub	1Ah
		ld	hl, SndPriorities
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (1C18h)
		cp	(hl)
		jr	z, loc_8FD
		jr	nc, loc_905

loc_8FD:
		ld	a, c
		ld	(1C09h), a
		ld	a, (hl)
		ld	(1C18h), a

loc_905:
		xor	a
		ld	(de), a
		inc	de
		djnz	loc_8E0
		ret
; ---------------------------------------------------------------------------

loc_90B:
		ld	a, c
		ld	(1C09h), a
		xor	a
		ld	(1C18h), a
		ld	de, soundqueue0
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ld	(de), a
		ret
; End of function DoSoundQueue


; =============== S U B	R O U T	I N E =======================================


SilenceFMChn:
		call	SetMaxRelRate
		ld	a, 40h
		ld	c, 7Fh
		call	SendAllFMOps
		ld	c, (ix+1)
		jp	FMNoteOff
; End of function SilenceFMChn


; =============== S U B	R O U T	I N E =======================================


SetMaxRelRate:
		ld	a, 80h
		ld	c, 0FFh
; End of function SetMaxRelRate


; =============== S U B	R O U T	I N E =======================================


SendAllFMOps:
		ld	b, 4

loc_932:
		push	af
		rst	WriteFMIorII
		pop	af
		add	a, 4
		djnz	loc_932
		ret
; End of function SendAllFMOps

; ---------------------------------------------------------------------------
PSGFreqs:	dw  3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3F7h,	3BEh, 388h
		dw  356h, 326h,	2F9h, 2CEh, 2A5h, 280h,	25Ch, 23Ah, 21Ah, 1FBh,	1DFh, 1C4h
		dw  1ABh, 193h,	17Dh, 167h, 153h, 140h,	12Eh, 11Dh, 10Dh, 0FEh,	0EFh, 0E2h
		dw  0D6h, 0C9h,	0BEh, 0B4h, 0A9h, 0A0h,	 97h,  8Fh,  87h,  7Fh,	 78h,  71h
		dw   6Bh,  65h,	 5Fh,  5Ah,  55h,  50h,	 4Bh,  47h,  43h,  40h,	 3Ch,  39h
		dw   36h,  33h,	 30h,  2Dh,  2Bh,  28h,	 26h,  24h,  22h,  20h,	 1Fh,  1Dh
		dw   1Bh,  1Ah,	 18h,  17h,  16h,  15h,	 13h,  12h,  11h,  10h,	   0,	 0
FMFreqs:	dw  284h, 2ABh,	2D3h, 2FEh, 32Dh, 35Ch,	38Fh, 3C5h, 3FFh, 43Ch,	47Ch, 4C0h

; =============== S U B	R O U T	I N E =======================================


DrumUpdateTrack:
		call	TrackTimeout
		call	z, DrumUpdate_Proc
		ret
; End of function DrumUpdateTrack


; =============== S U B	R O U T	I N E =======================================


DrumUpdate_Proc:
		ld	e, (ix+3)
		ld	d, (ix+4)

loc_A07:
		ld	a, (de)
		inc	de
		cp	0E0h
		jp	nc, cfHandler_Drum
		or	a
		jp	m, loc_A16
		dec	de
		ld	a, (ix+0Dh)

loc_A16:
		ld	(ix+0Dh), a
		or	a
		jp	p, loc_A3E
		push	de
		sub	80h
		jp	z, loc_A38
		ld	hl, 1D60h
		set	2, (hl)
		ex	af, af'
		call	DoNoteOff
		ex	af, af'
		ld	hl, 1C40h
		bit	2, (hl)
		jp	nz, loc_A38
		ld	(1C3Ch), a

loc_A38:
		pop	de
		ld	hl, 1D60h
		res	2, (hl)

loc_A3E:
		ld	a, (de)
		inc	de
		or	a
		jp	p, SetDuration
		dec	de
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		jp	loc_2A3
; ---------------------------------------------------------------------------

cfHandler_Drum:
		ld	hl, cfReturn_Drum
		jp	loc_A5B
; ---------------------------------------------------------------------------

cfReturn_Drum:
		inc	de
		jp	loc_A07
; ---------------------------------------------------------------------------

cfHandler:
		ld	hl, cfReturn

loc_A5B:
		push	hl
		sub	0E0h
		ld	hl, cfPtrTable
		rst	ReadPtrTable
		ld	a, (de)
		jp	(hl)
; End of function DrumUpdate_Proc

; ---------------------------------------------------------------------------

cfReturn:
		inc	de
		jp	loc_20B
; ---------------------------------------------------------------------------
cfPtrTable:	dw cfE0_Pan
		dw cfE1_Detune
		dw cfE2_SetComm
		dw cfE3_SilenceTrk
		dw cfE4_PanAnim
		dw cfE5_ChgPFMVol
		dw cfE6_ChgFMVol
		dw cfE7_Hold
		dw cfE8_NoteStop
		dw cfE9_SetLFO
		dw cfEA_PlayDAC
		dw cfEB_LoopExit
		dw cfEC_ChgPSGVol
		dw cfED_FMChnWrite
		dw cfEE_FM1Write
		dw cfEF_SetIns
		dw cfF0_Mods.betup
		dw cfF1_ModTypePFM
		dw cfF2_StopTrk
		dw cfF3_PSGNoise
		dw cfF4_ModType
		dw cfF5_SetPSGIns
		dw cfF6_GoTo
		dw cfF7_Loop
		dw cfF8_GoSub
		dw cfF9_Return
		dw cfFA_TickMult
		dw cfFB_ChgTransp
		dw cfFC_PitchSlide
		dw cfFD_RawFrqMode
		dw cfFE_SpcFM3Mode
		dw cfMetaCoordFlag
cfMetaPtrTable:	dw cf00_SetTempo
		dw cf01_PlaySnd
		dw cf02_MusPause
		dw cf03_CopyMem
		dw cf04_TickMulAll
		dw cf05_SSGEG
		dw cf06_FMVolEnv
; ---------------------------------------------------------------------------

cfEA_PlayDAC:
		ld	(1C3Ch), a
		ld	hl, 1C40h
		set	2, (hl)
		ret

; =============== S U B	R O U T	I N E =======================================


cfE0_Pan:
		ld	c, 3Fh

loc_AC1:
		ld	a, (ix+0Ah)
		and	c
		ex	de, hl
		or	(hl)
		ld	(ix+0Ah), a
		ld	c, a
		ld	a, 0B4h
		rst	WriteFMIorII
		ex	de, hl
		ret
; End of function cfE0_Pan

; ---------------------------------------------------------------------------

cfE9_SetLFO:
		ld	c, a
		ld	a, 22h
		call	WriteFMI
		inc	de
		ld	c, 0C0h
		jr	loc_AC1
; ---------------------------------------------------------------------------

cfE1_Detune:
		ld	(ix+10h), a
		ret
; ---------------------------------------------------------------------------

cfE2_SetComm:
		ld	(1C16h), a
		ret
; ---------------------------------------------------------------------------

cfE3_SilenceTrk:
		call	SilenceFMChn
		jp	cfF2_StopTrk
; ---------------------------------------------------------------------------

cfE4_PanAnim:
		push	ix
		pop	hl
		ld	bc, 11h
		add	hl, bc
		ex	de, hl
		ld	bc, 5
		ldir
		ld	a, 1
		ld	(de), a
		ex	de, hl
		dec	de
		ret
; ---------------------------------------------------------------------------

cfE5_ChgPFMVol:
		inc	de
		add	a, (ix+6)
		ld	(ix+6),	a
		ld	a, (de)

cfE6_ChgFMVol:
		bit	7, (ix+1)
		ret	nz
		add	a, (ix+6)
		ld	(ix+6),	a

; =============== S U B	R O U T	I N E =======================================


RefreshVolume:
		push	de
		ld	de, Volume_Ops
		ld	l, (ix+1Ch)
		ld	h, (ix+1Dh)
		ld	b, 4

loc_B1B:
		ld	a, (hl)
		or	a
		jp	p, loc_B33
		add	a, (ix+6)
		jp	m, loc_B28
		ld	a, 0FFh

loc_B28:
		push	hl
		ld	hl, 1C06h
		add	a, (hl)
		jp	m, loc_B32
		ld	a, 0FFh

loc_B32:
		pop	hl

loc_B33:
		and	7Fh
		ld	c, a
		ld	a, (de)
		rst	WriteFMIorII
		inc	de
		inc	hl
		djnz	loc_B1B
		pop	de
		ret
; End of function RefreshVolume

; ---------------------------------------------------------------------------

cfE7_Hold:
		set	1, (ix+0)
		dec	de
		ret
; ---------------------------------------------------------------------------

cfE8_NoteStop:
		call	TickMultiplier
		ld	(ix+1Eh), a
		ld	(ix+1Fh), a
		ret
; ---------------------------------------------------------------------------

cfEB_LoopExit:
		inc	de
		add	a, 28h
		ld	c, a
		ld	b, 0
		push	ix
		pop	hl
		add	hl, bc
		ld	a, (hl)
		dec	a
		jp	z, loc_B5F
		inc	de
		ret
; ---------------------------------------------------------------------------

loc_B5F:
		xor	a
		ld	(hl), a
		jp	cfF6_GoTo
; ---------------------------------------------------------------------------

cfEC_ChgPSGVol:
		bit	7, (ix+1)
		ret	z
		res	4, (ix+0)
		dec	(ix+17h)
		add	a, (ix+6)
		cp	0Fh
		jp	c, loc_B7A
		ld	a, 0Fh

loc_B7A:
		ld	(ix+6),	a
		ret
; ---------------------------------------------------------------------------

cfED_FMChnWrite:
		call	ReadFMCommand
		rst	WriteFMIorII
		ret
; ---------------------------------------------------------------------------

cfEE_FM1Write:
		call	ReadFMCommand
		call	WriteFMI
		ret

; =============== S U B	R O U T	I N E =======================================


ReadFMCommand:
		ex	de, hl
		ld	a, (hl)
		inc	hl
		ld	c, (hl)
		ex	de, hl
		ret
; End of function ReadFMCommand

; ---------------------------------------------------------------------------

cfEF_SetIns:
		bit	7, (ix+1)
		jr	nz, loc_BC9
		call	SetMaxRelRate
		ld	a, (de)
		ld	(ix+8),	a
		or	a
		jp	p, loc_BBF
		inc	de
		ld	a, (de)
		ld	(ix+0Fh), a

; =============== S U B	R O U T	I N E =======================================


SetInsFromSong:
		push	de
		ld	a, (ix+0Fh)
		sub	81h
		ld	hl, MusicPtrs
		rst	ReadPtrTable
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	a, (ix+8)
		and	7Fh
		ld	b, a
		call	JumpToInsData
		jr	loc_BC4
; ---------------------------------------------------------------------------

loc_BBF:
		push	de
		ld	b, a
		call	GetFMInsPtr

loc_BC4:
		call	SendFMIns
		pop	de
		ret
; End of function SetInsFromSong

; ---------------------------------------------------------------------------

loc_BC9:
		or	a
		ret	p
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF0_Mods.betup:
		ld	(ix+20h), e
		ld	(ix+21h), d
		ld	(ix+7),	80h
		inc	de
		inc	de
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF1_ModTypePFM:
		inc	de
		bit	7, (ix+1)
		jr	nz, cfF4_ModType
		ld	a, (de)

cfF4_ModType:
		ld	(ix+7),	a
		ret
; ---------------------------------------------------------------------------

cfF2_StopTrk:
		res	7, (ix+0)
		ld	a, 1Fh
		ld	(1C15h), a
		call	DoNoteOff
		ld	c, (ix+1)
		push	ix
		call	GetSFXChnPtrs
		ld	a, (1C19h)
		or	a
		jp	z, loc_C94
		xor	a
		ld	(1C18h), a
		bit	7, (iy+0)
		jr	z, loc_C1E
		ld	a, (ix+1)
		cp	(iy+1)
		jr	nz, loc_C1E
		push	iy
		ld	l, (iy+2Ah)
		ld	h, (iy+2Bh)
		jr	loc_C22
; ---------------------------------------------------------------------------

loc_C1E:
		push	hl
		ld	hl, (1C37h)

loc_C22:
		pop	ix
		res	2, (ix+0)
		bit	7, (ix+1)
		jr	nz, loc_C99
		bit	7, (ix+0)
		jr	z, loc_C94
		ld	a, 2
		cp	(ix+1)
		jr	nz, loc_C48
		ld	a, 4Fh
		bit	0, (ix+0)
		jr	nz, loc_C45
		and	0Fh

loc_C45:
		call	SendFM3SpcMode

loc_C48:
		ld	a, (ix+8)
		or	a
		jp	p, loc_C54
		call	SetInsFromSong
		jr	loc_C91
; ---------------------------------------------------------------------------

loc_C54:
		ld	b, a
		push	hl
		ld	hl, 1C04h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a
		pop	hl
		call	JumpToInsData
		call	SendFMIns
		push	hl
		ld	hl, BankRegister	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		pop	hl
		ld	a, (ix+18h)
		or	a
		jp	p, loc_C94
		ld	e, (ix+19h)
		ld	d, (ix+1Ah)

loc_C91:
		call	Sends.bSGEG

loc_C94:
		pop	ix
		pop	hl
		pop	hl
		ret
; ---------------------------------------------------------------------------

loc_C99:
		bit	0, (ix+0)
		jr	z, loc_C94
		ld	a, (ix+1Ah)
		or	a
		jp	p, loc_CA9
		ld	(7F11h), a

loc_CA9:
		jr	loc_C94
; ---------------------------------------------------------------------------

cfF3_PSGNoise:
		bit	2, (ix+1)
		ret	nz
		ld	a, 0DFh
		ld	(7F11h), a
		ld	a, (de)
		ld	(ix+1Ah), a
		set	0, (ix+0)
		or	a
		jr	nz, loc_CC6
		res	0, (ix+0)
		ld	a, 0FFh

loc_CC6:
		ld	(7F11h), a
		ret
; ---------------------------------------------------------------------------

cfF5_SetPSGIns:
		bit	7, (ix+1)
		ret	z
		ld	(ix+8),	a
		ret
; ---------------------------------------------------------------------------

cfF6_GoTo:
		ex	de, hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		dec	de
		ret
; ---------------------------------------------------------------------------

cfF7_Loop:
		inc	de
		add	a, 28h
		ld	c, a
		ld	b, 0
		push	ix
		pop	hl
		add	hl, bc
		ld	a, (hl)
		or	a
		jr	nz, loc_CE9
		ld	a, (de)
		ld	(hl), a

loc_CE9:
		inc	de
		dec	(hl)
		jp	nz, cfF6_GoTo
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF8_GoSub:
		ld	c, a
		inc	de
		ld	a, (de)
		ld	b, a
		push	bc
		push	ix
		pop	hl
		dec	(ix+9)
		ld	c, (ix+9)
		dec	(ix+9)
		ld	b, 0
		add	hl, bc
		ld	(hl), d
		dec	hl
		ld	(hl), e
		pop	de
		dec	de
		ret
; ---------------------------------------------------------------------------

cfF9_Return:
		push	ix
		pop	hl
		ld	c, (ix+9)
		ld	b, 0
		add	hl, bc
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	(ix+9)
		inc	(ix+9)
		ret
; ---------------------------------------------------------------------------

cfFA_TickMult:
		ld	(ix+2),	a
		ret
; ---------------------------------------------------------------------------

cfFB_ChgTransp:
		add	a, (ix+5)
		ld	(ix+5),	a
		ret
; ---------------------------------------------------------------------------

cfFC_PitchSlide:
		cp	1
		jr	nz, loc_D31
		set	5, (ix+0)
		ret
; ---------------------------------------------------------------------------

loc_D31:
		res	1, (ix+0)
		res	5, (ix+0)
		xor	a
		ld	(ix+10h), a
		ret
; ---------------------------------------------------------------------------

cfFD_RawFrqMode:
		cp	1
		jr	nz, loc_D47
		set	3, (ix+0)
		ret
; ---------------------------------------------------------------------------

loc_D47:
		res	3, (ix+0)
		ret
; ---------------------------------------------------------------------------

cfFE_SpcFM3Mode:
		ld	a, (ix+1)
		cp	2
		jr	nz, SpcFM3_skip
		set	0, (ix+0)
		ex	de, hl
		call	GetFM3FreqPtr
		ld	b, 4

loc_D5D:
		push	bc
		ld	a, (hl)
		inc	hl
		push	hl
		ld	hl, FM3_FreqVals
		add	a, a
		ld	c, a
		ld	b, 0
		add	hl, bc
		ldi
		ldi
		pop	hl
		pop	bc
		djnz	loc_D5D
		ex	de, hl
		dec	de
		ld	a, 4Fh

; =============== S U B	R O U T	I N E =======================================


SendFM3SpcMode:
		ld	(1C12h), a
		ld	c, a
		ld	a, 27h
		call	WriteFMI
		ret
; End of function SendFM3SpcMode

; ---------------------------------------------------------------------------

SpcFM3_skip:
		inc	de
		inc	de
		inc	de
		ret
; ---------------------------------------------------------------------------
FM3_FreqVals:	dw 0, 132h, 18Eh, 1E4h,	234h, 27Eh, 2C2h, 2F0h
; ---------------------------------------------------------------------------

cfMetaCoordFlag:
		ld	hl, cfMetaPtrTable
		rst	ReadPtrTable
		inc	de
		ld	a, (de)
		jp	(hl)
; ---------------------------------------------------------------------------

cf00_SetTempo:
		ld	(1C14h), a
		ld	(1C13h), a
		ret
; ---------------------------------------------------------------------------

cf01_PlaySnd:
		ld	(1C09h), a
		ret
; ---------------------------------------------------------------------------

cf02_MusPause:
		ld	(1C11h), a
		or	a
		jr	z, loc_DC8
		push	ix
		push	de

loc_DAE:
		ld	ix, 1C40h
		ld	b, 0Ah
		ld	de, 30h

loc_DB7:
		res	7, (ix+0)
		call	SendNoteOff
		add	ix, de
		djnz	loc_DB7
		pop	de
		pop	ix
		jp	SilencePSG
; ---------------------------------------------------------------------------

loc_DC8:
		push	ix
		push	de
		ld	ix, 1C40h
		ld	b, 0Ah
		ld	de, 30h

loc_DD4:
		set	7, (ix+0)
		add	ix, de
		djnz	loc_DD4
		pop	de
		pop	ix
		ret
; ---------------------------------------------------------------------------

cf03_CopyMem:
		ex	de, hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	hl
		ld	c, (hl)
		ld	b, 0
		inc	hl
		ex	de, hl
		ldir
		dec	de
		ret
; ---------------------------------------------------------------------------

cf04_TickMulAll:
		ld	b, 0Ah
		ld	hl, 1C42h

loc_DF3:
		push	bc
		ld	bc, 30h
		ld	(hl), a
		add	hl, bc
		pop	bc
		djnz	loc_DF3
		ret
; ---------------------------------------------------------------------------

cf05_SSGEG:
		ld	(ix+18h), 80h
		ld	(ix+19h), e
		ld	(ix+1Ah), d

; =============== S U B	R O U T	I N E =======================================


Sends.bSGEG:
		ld	hl, SSGEG_Ops
		ld	b, 4

loc_E0C:
		ld	a, (de)
		inc	de
		ld	c, a
		ld	a, (hl)
		inc	hl
		rst	WriteFMIorII
		djnz	loc_E0C
		dec	de
		ret
; End of function Sends.bSGEG

; ---------------------------------------------------------------------------

cf06_FMVolEnv:
		ld	(ix+18h), a
		inc	de
		ld	a, (de)
		ld	(ix+19h), a
		ret
; ---------------------------------------------------------------------------

UpdatePSGTrk:
		call	TrackTimeout
		jr	nz, loc_E31
		call	TrkUpdate_Proc
		bit	4, (ix+0)
		ret	nz
		call	PrepareModulat
		jr	loc_E3D
; ---------------------------------------------------------------------------

loc_E31:
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_E3D
		dec	(ix+1Eh)
		jp	z, SetRest

loc_E3D:
		call	DoPitchSlide
		call	DoModulation
		bit	2, (ix+0)
		ret	nz
		ld	c, (ix+1)
		ld	a, l
		and	0Fh
		or	c
		ld	(7F11h), a
		ld	a, l
		and	0F0h
		or	h
		rrca
		rrca
		rrca
		rrca
		ld	(7F11h), a
		ld	a, (ix+8)
		or	a
		ld	c, 0
		jr	z, loc_E6E
		dec	a
		ld	hl, VolEnvPtrs
		rst	ReadPtrTable
		call	DoPSGVolEnv
		ld	c, a

loc_E6E:
		bit	4, (ix+0)
		ret	nz
		ld	a, (ix+6)
		add	a, c
		bit	4, a
		jr	z, loc_E7D
		ld	a, 0Fh

loc_E7D:
		or	(ix+1)
		add	a, 10h
		bit	0, (ix+0)
		jr	nz, loc_E8C
		ld	(7F11h), a
		ret
; ---------------------------------------------------------------------------

loc_E8C:
		add	a, 20h
		ld	(7F11h), a
		ret
; ---------------------------------------------------------------------------

loc_E92:
		ld	(ix+17h), a

; =============== S U B	R O U T	I N E =======================================


DoPSGVolEnv:
		push	hl
		ld	c, (ix+17h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jr	z, VolEnv_Next
		cp	83h
		jr	z, VolEnv_Off	; 83 - stop the	tone
		cp	81h
		jr	z, VolEnv_Hold	; 81 - hold the	envelope at current level
		cp	80h
		jr	z, VolEnv_Reset	; 80 - loop back to beginning
		inc	bc
		ld	a, (bc)
		jr	loc_E92
; ---------------------------------------------------------------------------

VolEnv_Off:
		set	4, (ix+0)
		pop	hl
		jp	SetRest
; ---------------------------------------------------------------------------

VolEnv_Reset:
		xor	a
		jr	loc_E92
; ---------------------------------------------------------------------------

VolEnv_Hold:
		pop	hl
		set	4, (ix+0)
		ret
; ---------------------------------------------------------------------------

VolEnv_Next:
		inc	(ix+17h)
		ret
; End of function DoPSGVolEnv


; =============== S U B	R O U T	I N E =======================================


SetRest:
		set	4, (ix+0)
		bit	2, (ix+0)
		ret	nz
; End of function SetRest


; =============== S U B	R O U T	I N E =======================================


SilencePSGChn:
		ld	a, 1Fh
		add	a, (ix+1)
		or	a
		ret	p
		ld	(7F11h), a
		bit	0, (ix+0)
		ret	z
		ld	a, 0FFh
		ld	(7F11h), a
		ret
; End of function SilencePSGChn

; ---------------------------------------------------------------------------

loc_EE5:
		di
		ld	a, 2Bh
		ld	c, 0
		call	WriteFMI

loc_EED:
		ei
		ld	a, d
		or	e
		jr	z, loc_EED
		ei

DACLoop:
		ld	b, 0Ah

loc_EF5:
		djnz	$
		ld	a, (hl)
		rlca
		rlca
		rlca
		rlca
		and	0Fh
		ld	(loc_F02+2), a
		ld	a, c

loc_F02:
		add	a, (iy+0)
		ld	c, a
		ld	a, 2Ah
		di
		ld	(ym2612_a0), a
		ld	a, c
		ld	(ym2612_d0), a
		ei

loc_F11:
		ld	b, 0Ah

loc_F13:
		djnz	$
		ld	a, (hl)
		and	0Fh
		ld	(loc_F1C+2), a
		ld	a, c

loc_F1C:
		add	a, (iy+0)
		ld	c, a
		ld	a, 2Ah
		di
		ld	(ym2612_a0), a
		ld	a, c
		ld	(ym2612_d0), a
		ei
		inc	hl
		ld	a, h
		or	l
		jp	nz, locb_F52
		ld	hl, 8000h
		di
		exx
		ld	hl, 1C05h
		inc	(hl)
		ld	hl, 1C05h
		ld	a, (hl)
		bankswitch
		ld	(hl), a
		ld	(hl), a
		exx
		ei

locb_F52:
		dec	de
		ld	a, d
		or	e
		jp	nz, DACLoop
		ld	hl, 1C40h
		res	2, (hl)
		xor	a
		ld	(1C3Ch), a
		jp	loc_EE5
; ---------------------------------------------------------------------------
DPCMData:	db    0,   1,	2,   4,	  8, 10h, 20h, 40h
		db  80h,0FFh,0FEh,0FCh,0F8h,0F0h,0E0h,0C0h
VolEnvPtrs:	dw byte_F8C,byte_F8E,byte_F95,byte_F9D,byte_FA9,byte_FB4
		dw byte_FC3,byte_FCC,byte_FDD,byte_FE8,byte_FFD,byte_1007
byte_F8C:	db   2,83h
byte_F8E:	db   0,	 2,  4,	 6,  8,10h,83h
byte_F95:	db   2,	 1,  0,	 0,  1,	 1,  2,81h
byte_F9D:	db   4,	 3,  2,	 1,  0,	 0,  1,	 1,  2,	 2,  2,81h
byte_FA9:	db   3,	 0,  1,	 1,  1,	 2,  3,	 4,  4,	 5,81h
byte_FB4:	db   0,	 0,  1,	 1,  2,	 3,  4,	 5,  5,	 6,  8,	 7,  7
		db   6,81h
byte_FC3:	db   1,0Ch,  3,0Fh,  2,	 7,  3,0Fh,80h
byte_FCC:	db   0,	 0,  0,	 2,  3,	 3,  4,	 5,  6,	 7,  8,	 9,0Ah
		db 0Bh,0Eh,0Fh,83h
byte_FDD:	db   3,	 2,  1,	 1,  0,	 0,  1,	 2,  3,	 4,81h
byte_FE8:	db   1,	 0,  0,	 0,  0,	 1,  1,	 1,  2,	 2,  2,	 3,  3
		db   3,	 3,  4,	 4,  4,	 5,  5,81h
byte_FFD:	db 10h,20h,30h,40h,30h,20h,10h,	 0,0F0h,80h
byte_1007:	db   0,	 0,  1,	 1,  3,	 3,  4,	 5,83h
ModEnvPtrs:	dw byte_1024, byte_1030, byte_103D, byte_1049, byte_108B
		dw byte_10C0, byte_10FD, byte_1117, byte_1131, byte_1139
byte_1024:	db  40h, 60h, 70h, 60h,	50h, 30h, 10h,-10h,-30h,-50h,-70h
		db  83h
byte_1030:	db    0,   2,	4,   6,	  8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h
		db  18h
		db  81h
byte_103D:	db    0,   0,	1,   3,	  1,   0,  -1,	-3,  -1,   0
		db  82h, 02h
byte_1049:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 2,   4,   6,	8
		db  0Ah, 0Ch, 0Ah,   8,	  6,   4,   2,	 0,  -2,  -4,  -6
		db   -8,-0Ah,-0Ch,-0Ah,	 -8,  -6,  -4,	-2,   0
		db  82h, 29h
byte_108B:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   2,	 4,   6,   8, 0Ah
		db  0Ch, 0Ah,	8,   6,	  4,   2,   0,	-2,  -4,  -6,  -8
		db -0Ah,-0Ch,-0Ah,  -8,	 -6,  -4,  -2
		db  82h, 1Bh
byte_10C0:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   3,	 6,   3,   0,  -3
		db   -6,  -6,  -3,   0
		db  82h, 33h
byte_10FD:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   2,   4,	 2,   0,  -2,  -4
		db   -2,   0
		db  82h, 11h
byte_1117:	db   -2,  -1,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 1,   1,   0,	0
		db   -1,  -1
		db  82h, 11h
byte_1131:	db    3,   2,	1,   0,	  0,   0,   1
		db  81h
byte_1139:	db    0,   0,	0,   0,	  1,   1,   1,	 1,   2,   2,	1
		db    1,   1,	0,   0,	  0
		db  84h, 01h, 82h, 04h
MusicBanks:	db 02h
		db 02h
		db 02h
		db 02h
		db 02h
		db 02h
MusicPtrs:	dw 8000h+Music81-MusicIndex
		dw 8000h+Music82-MusicIndex
		dw 8000h+Music83-MusicIndex
		dw 8000h+Music84-MusicIndex
		dw 8000h+Music85-MusicIndex
		dw 8000h+Music86-MusicIndex
SFXPtrs:	dw 0C000h+Sound00-SoundIndex
		dw 0C000h+Sound01-SoundIndex
		dw 0C000h+Sound02-SoundIndex
		dw 0C000h+Sound03-SoundIndex
		dw 0C000h+Sound04-SoundIndex
		dw 0C000h+Sound05-SoundIndex
		dw 0C000h+Sound06-SoundIndex
		dw 0C000h+Sound07-SoundIndex
		dw 0C000h+Sound08-SoundIndex
		dw 0C000h+Sound09-SoundIndex
		dw 0C000h+Sound0A-SoundIndex
		dw 0C000h+Sound0B-SoundIndex
		dw 0C000h+Sound0C-SoundIndex
		dw 0C000h+Sound0D-SoundIndex
		dw 0C000h+Sound0E-SoundIndex
		dw 0C000h+Sound0F-SoundIndex
SpcSFXPtrs:	dw 0C000h+Sound00-SoundIndex
		dw 0C000h+Sound01-SoundIndex
		dw 0C000h+Sound03-SoundIndex
SndPriorities:	db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh
DACTablePtrs:	dw stru_11EC
		dw stru_11F2
		dw stru_11F8
		dw stru_11FE
		dw stru_1204
		dw stru_120A
		dw stru_1210
stru_11EC:	db 30h
		db 4
		dw DAC_Sample1_End-DAC_Sample1
		dw 8000h+DAC_Sample1-DAC_Index
stru_11F2:	db 0Ah
		db 4
		dw DAC_Sample2_End-DAC_Sample2
		dw 8000h+DAC_Sample2-DAC_Index
stru_11F8:	db 0Ah
		db 4
		dw DAC_Sample3_End-DAC_Sample3
		dw 8000h+DAC_Sample3-DAC_Index
stru_11FE:	db 0Eh
		db 4
		dw DAC_Sample3_End-DAC_Sample3
		dw 8000h+DAC_Sample3-DAC_Index
stru_1204:	db 10h
		db 4
		dw DAC_Sample3_End-DAC_Sample3
		dw 8000h+DAC_Sample3-DAC_Index
stru_120A:	db 0Ah
		db 4
		dw DAC_Sample4_End-DAC_Sample4
		dw 8000h+DAC_Sample4-DAC_Index
stru_1210:	db 0Ah
		db 4
		dw DAC_Sample5_End-DAC_Sample5
		dw 8000h+DAC_Sample5-DAC_Index